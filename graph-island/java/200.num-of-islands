class Solution {
    public int numIslands(char[][] grid) {
        
        
        int count = 0; 
        
        int rows = grid.length; 
        if(rows==0){
            return 0;
        }
        
        int cols = grid[0].length; 
        
        
        for(int i= 0; i<rows; i++){
            for(int j =0; j<cols; j++){
                if(grid[i][j]=='1'){
                    
                    dfs(grid,i,j);
                    count++;
                }
                
            }
        }
        
        return count;
    }
    
    private void dfs(char[][]grid, int row, int col){
        //out of bound or value is not 1 return 0
    if(row>=grid.length || row<0 || col <0 || col>=grid[0].length || grid[row][col]!='1'){
            return;
        }
        grid[row][col] = '0';
        
      
        dfs(grid,row,col+1);
        dfs(grid,row, col-1);
        dfs(grid, row+1,col);
        dfs(grid,row-1,col);
            
        
    }
}
