/*

Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1
Return:

[
   [5,4,11,2],
   [5,8,4,5]
]

*/ 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

 
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        List<Integer> currentResult = new ArrayList<Integer>();
        pathSumHelper(root,sum,result,currentResult);
        
        return result;
        
        
    }
    
    private void pathSumHelper(TreeNode node, int sum,List<List<Integer>> result, List<Integer> currentResult ){
        if(node==null) return; 
        
        currentResult.add(node.val);
        if(node.left==null && node.right==null){
           if(sum==node.val){
            result.add(new ArrayList<Integer>(currentResult));
           
            
        } 
            return;
        } 
        
            if(node.left!=null) {
                pathSumHelper(node.left,sum-node.val,result,currentResult);
                currentResult.remove(currentResult.size()-1);
            }
            if(node.right!=null) {
                pathSumHelper(node.right,sum-node.val,result,currentResult);
                currentResult.remove(currentResult.size()-1);
            }
}        
        
        
    }
