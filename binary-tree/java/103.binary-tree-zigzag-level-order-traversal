/*Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:

[
  [3],
  [20,9],
  [15,7]
]*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> zigzagList = new ArrayList<List<Integer>>();
        
        List currentList = new ArrayList<Integer>();
            
         
        
        zigzagHelper(root,zigzagList, 0);
           
        
        return zigzagList;
    }
    
    private void zigzagHelper(TreeNode node, List<List<Integer>> zigzagList, int level){
        
        if(node==null){
            return;
        }
        if(level==zigzagList.size()){
            zigzagList.add(new ArrayList<Integer>());
        }
        
        if(level%2==0){
            zigzagList.get(level).add(node.val);
        }else{
            zigzagList.get(level).add(0,node.val);
            
        }
        zigzagHelper(node.left,zigzagList,level+1);
        zigzagHelper(node.right,zigzagList,level+1);
    }
}
