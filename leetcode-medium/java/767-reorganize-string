/*
Given a string S, check if the letters can be rearranged so that two characters that are adjacent to each other are not the same.

If possible, output any possible result.  If not possible, return the empty string.

Example 1:

Input: S = "aab"
Output: "aba"
Example 2:

Input: S = "aaab"
Output: ""
Note:

S will consist of lowercase letters and have length in range [1, 500].


*/
class Solution {
    public String reorganizeString(String S) {
        int stringLength = S.length();
        
        Map<Character,Integer> mappings = new HashMap<Character,Integer>();
        for(char c :S.toCharArray()){
            mappings.put(c,mappings.getOrDefault(c,0)+1);
            if(mappings.get(c)>(stringLength+1)/2) return "";
        }
        
        StringBuilder sb = new StringBuilder();
        
        //construct priority queue to hold char and intvand add mappings
        
        PriorityQueue<Map.Entry<Character,Integer>> pq = new PriorityQueue<Map.Entry<Character,Integer>>((a,b)->(b.getValue()-a.getValue()));
        
        pq.addAll(mappings.entrySet());
        /*while (!pq.isEmpty()) {
            Map.Entry<Character, Integer> entry = pq.poll();
            sb.append(entry.getKey());
            entry.setValue(entry.getValue() - 1);
            queue.offer(entry);
            while (queue.size() > 1) {
                Map.Entry<Character, Integer> temp = queue.poll();
                if (temp.getValue() > 0) {
                    pq.offer(temp);
                }
            }
        }
        return sb.length() == S.length() ? sb.toString() : ""; */
        
        Queue<Map.Entry<Character, Integer>> queue = new LinkedList<>();
        while(!pq.isEmpty()){
            Map.Entry<Character,Integer> curr = pq.poll();
            sb.append(curr.getKey());
            curr.setValue(curr.getValue()-1);
            queue.offer(curr);
            while(queue.size()>1){
               Map.Entry<Character,Integer> currQ = queue.poll(); 
            if(currQ.getValue()>0){
                pq.offer(currQ);
            }
            }

            
        }
        
        return sb.length() == stringLength ? sb.toString() : "";
        
        
}
}
