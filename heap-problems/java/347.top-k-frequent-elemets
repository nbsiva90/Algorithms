/* 

347. Top K Frequent Elements
Medium

3874

234

Add to List

Share
Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
Note:

You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.
It's guaranteed that the answer is unique, in other words the set of the top k frequent elements is unique.
You can return the answer in any order.

*/ 

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        PriorityQueue<Map.Entry<Integer,Integer>> pq = new PriorityQueue<>((a, b) -> a.getValue()-b.getValue() );
        
        int[] result = new int[k];
        Map<Integer,Integer> countMap = new HashMap<Integer, Integer>();
        for(int i : nums){
            
            int newCount = countMap.getOrDefault(i,0)+1;
            
            countMap.put(i,newCount);
        }// O(n) 
        
        
        //pq.addAll(countMap.entrySet()); // klogk
        
        for(Map.Entry e : countMap.entrySet()){
            pq.offer(e);
            if(pq.size()>k){
                //
                pq.poll();
            }
        }
        int i =0;
       
            while(!pq.isEmpty() && i<k){
                 result[i] = pq.poll().getKey();
                i++;
            }//klogk
           
        
        return result;
    }
}
//time complexity - addAll - n* heapify = n*logk = k = number of unique elements. 
