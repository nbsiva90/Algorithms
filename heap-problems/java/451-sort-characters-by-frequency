/* 
Given a string, sort it in decreasing order based on the frequency of characters.

Example 1:

Input:
"tree"

Output:
"eert"

Explanation:
'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input:
"cccaaa"

Output:
"cccaaa"

Explanation:
Both 'c' and 'a' appear three times, so "aaaccc" is also a valid answer.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input:
"Aabb"

Output:
"bbAa"

Explanation:
"bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.

*/

class Solution {
    public String frequencySort(String s) {
        //max heap 
        PriorityQueue<Map.Entry<Character, Integer>> pq = new PriorityQueue<>((a,b) -> b.getValue() - a.getValue());
        
        
        
        Map<Character, Integer> freqMap = new HashMap<Character, Integer>();
        
        
        
        char[] charS = s.toCharArray();
        
        for(char c :charS){
            int count = freqMap.getOrDefault(c,0)+1;
            
            freqMap.put(c,count);
        }
        
        pq.addAll(freqMap.entrySet());
        
        StringBuilder result = new StringBuilder();
        
        while(!pq.isEmpty()){
            
            Map.Entry<Character, Integer> curr = pq.poll(); 
            int count = curr.getValue();
            char c = curr.getKey();
            for(int i=0; i<count; i++){
                result.append(c);
            }
            
            
        }
        
        
        return result.toString(); 
        
    }
}
//Run time complexity : O(k*m) where k = size of pq(unique char in string), m = count of most freq char
//                adding to pq :  O(klogk)
//Space complexity :  O(k)
