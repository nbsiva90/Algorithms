/* We have a list of points on the plane.  Find the K closest points to the origin (0, 0).

(Here, the distance between two points on a plane is the Euclidean distance.)

You may return the answer in any order.  The answer is guaranteed to be unique (except for the order that it is in.) */
class Solution {
    public int[][] kClosest(int[][] points, int K) {
        
        
   PriorityQueue<int[]> pq = new PriorityQueue<>(K, (int[] a, int[] b) -> b[0]*b[0]+b[1]*b[1]-a[0]*a[0]-a[1]*a[1]);
      
        int[][] kClosest = new int[K][2];
          for(int[] point : points){
            pq.offer(point);
              if(pq.size()>K){
                  pq.poll();
              }
               
          }
        int i = 0;
        while(pq.size()>0){
            kClosest[i] = pq.poll();
            i++;
            
        }
        
        return kClosest;
    }
}
