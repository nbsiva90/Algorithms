/*
We have a collection of stones, each stone has a positive integer weight.

Each turn, we choose the two heaviest stones and smash them together.  Suppose the stones have weights x and y with x <= y.  The result of this smash is:

If x == y, both stones are totally destroyed;
If x != y, the stone of weight x is totally destroyed, and the stone of weight y has new weight y-x.
At the end, there is at most 1 stone left.  Return the weight of this stone (or 0 if there are no stones left.)


*/
class Solution {
    public int lastStoneWeight(int[] stones) {
        
        
        PriorityQueue<Integer> pq = new PriorityQueue<>((Integer a,Integer b)->b-a);
        int result = 0 ;
        for(int stone : stones){
            pq.offer(stone);
        }
       // pq.addAll(Arrays.asList(stones));
        while(pq.size()>1){
            Integer stone1 = pq.poll();
            Integer stone2 = pq.poll(); 
            if(stone1!=stone2){
                pq.offer(Math.abs(stone1-stone2));
            }
        }
        if(pq.size()==1){
            result = pq.poll();
        }
        
        return result; 
    }
}
