/*


In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.

 

Example 1:


Input: root = [1,2,3,4], x = 4, y = 3
Output: false
Example 2:


Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true
Example 3:



Input: root = [1,2,3,null,4], x = 2, y = 3
Output: false
 

Note:

The number of nodes in the tree will be between 2 and 100.
Each node has a unique integer value from 1 to 100.
 

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int xHeight;
    int yHeight;
    public boolean isCousins(TreeNode root, int x, int y) {
        if(root==null){
            return false;
        }
        findHeight(root,x,y,-1);
        System.out.println("x level : " +xHeight + isSibling(root,x,y));
         System.out.println("y level : " +yHeight);
        if((xHeight==yHeight) && !(isSibling(root,x,y))){
         return true;   
        }else{
            return false;
        }
    
    }
     public boolean isSibling(TreeNode root, int x, int y) {
      if(root==null) return false;
         if(root.left==null && root.right ==null) return false;
         return ( (root.left!=null && root.left.val == x) && (root.right!=null && root.right.val == y) || 
                (root.left!=null && root.left.val == y) && (root.right!=null && root.right.val ==x) || 
                (root.left!=null && isSibling(root.left, x, y)) || 
                (root.right!=null &&isSibling(root.right, x, y)));
         
     }
     public void findHeight(TreeNode root, int x, int y, int level) {
          if(root == null){
              return;
          }
         if(root.val==x){
             xHeight = level;
         }
         if(root.val==y){
             yHeight = level;
         }
           findHeight(root.left,x,y,level+1);
       
         findHeight(root.right,x,y,level+1);
         
         return;
     
         
     }
}
